name: Validate Workflows & Actions

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
    workflow_dispatch:

jobs:
    validate-workflows:
        name: Validate Workflow Files
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Validate YAML syntax
              run: |
                  echo "🔍 Validating YAML syntax for all workflow files..."

                  # Install yamllint
                  pip install yamllint

                  # Create yamllint config
                  cat > .yamllint.yml << 'EOF'
                  extends: default
                  rules:
                    line-length:
                      max: 200
                      level: warning
                    comments:
                      min-spaces-from-content: 1
                    indentation:
                      spaces: 2
                  EOF

                  # Validate all workflow files
                  find .github/workflows -name "*.yml" -o -name "*.yaml" | while read file; do
                    echo "Checking $file..."
                    yamllint -c .yamllint.yml "$file"
                  done

                  echo "✅ All workflow files are valid YAML"

            - name: Validate composite actions
              run: |
                  echo "🔍 Validating composite action definitions..."

                  find actions -name "action.yml" -o -name "action.yaml" | while read file; do
                    echo "Checking $file..."
                    yamllint -c .yamllint.yml "$file"
                  done

                  echo "✅ All composite actions are valid"

    test-python-scripts:
        name: Test Python Scripts
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"

            - name: Install dependencies
              run: |
                  echo "📦 Installing Python dependencies..."

                  # Find all Python scripts
                  SCRIPT_DIRS=$(find actions -type f -name "*.py" -exec dirname {} \; | sort -u)

                  for dir in $SCRIPT_DIRS; do
                    if [ -f "$dir/requirements.txt" ]; then
                      echo "Installing dependencies from $dir/requirements.txt"
                      pip install -r "$dir/requirements.txt"
                    fi
                  done

                  # Also install common testing tools
                  pip install pytest pylint flake8

            - name: Lint Python scripts
              continue-on-error: true
              run: |
                  echo "🔍 Linting Python scripts..."

                  # Find all Python files
                  PYTHON_FILES=$(find actions -type f -name "*.py")

                  if [ -z "$PYTHON_FILES" ]; then
                    echo "No Python files found"
                    exit 0
                  fi

                  echo "Found Python files:"
                  echo "$PYTHON_FILES"

                  # Run flake8 (relaxed rules)
                  echo ""
                  echo "Running flake8..."
                  flake8 --max-line-length=120 --ignore=E501,W503 $PYTHON_FILES || true

            - name: Check Python syntax
              run: |
                  echo "🐍 Checking Python syntax..."

                  find actions -type f -name "*.py" | while read file; do
                    echo "Checking $file..."
                    python -m py_compile "$file"
                  done

                  echo "✅ All Python scripts have valid syntax"

    validate-structure:
        name: Validate Repository Structure
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Check required files
              run: |
                  echo "📋 Checking repository structure..."

                  # Check for README
                  if [ ! -f "README.md" ]; then
                    echo "❌ README.md is missing"
                    exit 1
                  fi
                  echo "✅ README.md exists"

                  # Check for workflows directory
                  if [ ! -d ".github/workflows" ]; then
                    echo "❌ .github/workflows directory is missing"
                    exit 1
                  fi
                  echo "✅ .github/workflows directory exists"

                  # Check for actions directory
                  if [ ! -d "actions" ]; then
                    echo "❌ actions directory is missing"
                    exit 1
                  fi
                  echo "✅ actions directory exists"

                  # List all reusable workflows
                  echo ""
                  echo "📄 Reusable workflows:"
                  find .github/workflows -name "*.yml" | while read file; do
                    if grep -q "workflow_call" "$file"; then
                      echo "  - $(basename $file)"
                    fi
                  done

                  # List all composite actions
                  echo ""
                  echo "🔧 Composite actions:"
                  find actions -name "action.yml" | while read file; do
                    ACTION_NAME=$(dirname $file | xargs basename)
                    echo "  - $ACTION_NAME"
                  done

            - name: Validate action metadata
              run: |
                  echo "🔍 Validating composite action metadata..."

                  find actions -name "action.yml" | while read file; do
                    ACTION_DIR=$(dirname $file)
                    ACTION_NAME=$(basename $ACTION_DIR)
                    
                    echo "Checking action: $ACTION_NAME"
                    
                    # Check if action has name
                    if ! grep -q "^name:" "$file"; then
                      echo "❌ Action $ACTION_NAME missing 'name' field"
                      exit 1
                    fi
                    
                    # Check if action has description
                    if ! grep -q "^description:" "$file"; then
                      echo "❌ Action $ACTION_NAME missing 'description' field"
                      exit 1
                    fi
                    
                    # Check if composite action has 'runs' section
                    if ! grep -q "runs:" "$file"; then
                      echo "❌ Action $ACTION_NAME missing 'runs' section"
                      exit 1
                    fi
                  done

                  echo "✅ All composite actions have valid metadata"

    security-check:
        name: Security Scan
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Check for secrets in code
              run: |
                  echo "🔐 Scanning for potential secrets..."

                  # Check for common secret patterns (basic check)
                  if grep -r -i "password\s*=\s*['\"]" actions/ 2>/dev/null | grep -v "password_input\|input.password"; then
                    echo "⚠️ Found potential hardcoded passwords"
                  fi

                  if grep -r -i "api_key\s*=\s*['\"]" actions/ 2>/dev/null | grep -v "env.API_KEY\|secrets.API_KEY"; then
                    echo "⚠️ Found potential hardcoded API keys"
                  fi

                  echo "✅ Basic security scan complete"

    summary:
        name: Validation Summary
        runs-on: ubuntu-latest
        needs:
            [
                validate-workflows,
                test-python-scripts,
                validate-structure,
                security-check,
            ]
        if: always()
        steps:
            - name: Create summary
              run: |
                  echo "## 🎯 Validation Results" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  if [ "${{ needs.validate-workflows.result }}" == "success" ]; then
                    echo "✅ **Workflow Validation**: Passed" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "❌ **Workflow Validation**: Failed" >> $GITHUB_STEP_SUMMARY
                  fi

                  if [ "${{ needs.test-python-scripts.result }}" == "success" ]; then
                    echo "✅ **Python Scripts**: Passed" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "❌ **Python Scripts**: Failed" >> $GITHUB_STEP_SUMMARY
                  fi

                  if [ "${{ needs.validate-structure.result }}" == "success" ]; then
                    echo "✅ **Repository Structure**: Passed" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "❌ **Repository Structure**: Failed" >> $GITHUB_STEP_SUMMARY
                  fi

                  if [ "${{ needs.security-check.result }}" == "success" ]; then
                    echo "✅ **Security Check**: Passed" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "❌ **Security Check**: Failed" >> $GITHUB_STEP_SUMMARY
                  fi

                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "---" >> $GITHUB_STEP_SUMMARY
                  echo "**Repository**: markethub-platform/github-actions" >> $GITHUB_STEP_SUMMARY
                  echo "**Purpose**: Centralized workflows and composite actions" >> $GITHUB_STEP_SUMMARY
